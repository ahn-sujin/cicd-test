name: Deploy to AWS ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: asj-cicd-test
  ECS_CLUSTER: asj-test-cluster
  ECS_SERVICE: asj-test-service
  ECS_TASK_DEFINITION: ./.github/task-definition.json
  CONTAINER_NAME: asj-test-container

jobs:
  deploy:
    name:
    # 해당 job을 리눅스 환경에서 사용함
    runs-on: ubuntu-latest

    env:
      PORT: 3000

    steps:
      # 깃허브에 올려둔 코드를 CI 서버로 내려받은 후 브랜치로 전환
      - name: Checkout
        uses: actions/checkout@v3 # 소유자/저장소명@사용 가능한 최신 버전

      # Github Repository Secrets를 통해 환경 변수 파일을 생성
      # TODO: Github Repository Secrets 환경 변수 세팅 해야함
      # - name: Creact .env file
      #   run: |
      #     echo "NEXT_PUBLIC_BASE_URL" >> .env
      #     echo "NEXT_PUBLIC_GOOGLE_ANALYTICS" >> .env
      #     echo "NEXT_PUBLIC_API_PAYMENT" >> .env
      #     echo "NEXT_PUBLIC_IMP_UID" >> .env
      #     echo "NEXT_PUBLIC_DOMAIN" >> .env
      #     echo "NEXT_PUBLIC_QB_WEB_URL" >> .env
      #     echo "NEXT_PUBLIC_MARKETING_COUNT_URL" >> .env
      #   env:
      #     NEXT_PUBLIC_BASE_URL: ${{ vars.NEXT_PUBLIC_BASE_URL }}
      #     NEXT_PUBLIC_GOOGLE_ANALYTICS: ${{ vars.NEXT_PUBLIC_GOOGLE_ANALYTICS }}
      #     NEXT_PUBLIC_API_PAYMENT: ${{ vars.NEXT_PUBLIC_API_PAYMENT }}
      #     NEXT_PUBLIC_IMP_UID: ${{ vars.NEXT_PUBLIC_IMP_UID }}
      #     NEXT_PUBLIC_DOMAIN: ${{ vars.NEXT_PUBLIC_DOMAIN }}
      #     NEXT_PUBLIC_QB_WEB_URL: ${{ vars.NEXT_PUBLIC_QB_WEB_URL }}
      #     NEXT_PUBLIC_MARKETING_COUNT_URL: ${{ vars.NEXT_PUBLIC_MARKETING_COUNT_URL }}

      # npmrc 파일 생성
      # - name: Creact .npmrc file
      #   run: |
      #     echo "//npm.pkg.github.com/:_authToken=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" >> .npmrc
      #     echo "@predictionai:registry=https://npm.pkg.github.com/" >> .npmrc

      # AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # AWS ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Docker 이미지 빌드, 태깅 후 AWS ECR에 push
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # ECS 작업 정의 생성
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # 작업 정의 파일을 ECS 서비스에 반영
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
